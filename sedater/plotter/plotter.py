# ./sedater/plotter/plotter.py
# Author:   Ulli Goschler <ulligoschler@gmail.com>
# Modified: Thu, 10.12.2015 - 00:36:06

import os, sys
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid.anchored_artists import AnchoredText

import xml.etree.ElementTree as et

class Plotter(object):
    def __init__(self, graph, annotationFile=False, outputDir=False, headerline=False):
        """
        The main plotting utility.

        By default it plots two different graphs for each (Sensor) 
        input file:
        - The acceration in X Y Z
        - The gyroscope in X Y Z

        It is currently not able to read a header/comment line from 
        the ``.csv`` file and therefore determine the order of 
        arguments.
        The order of values has to be:

        .. code-block:: none
            :linenos:
            Index, accelX, accelY, accelZ, gyroX, gyroY, gyroZ

        If an Annotationfile is provided the Validation ``Pattern``-type
        will be extracted and an overlay generated, indicating the 
        Gold Standard.

        :param str annotationFile: Path to the Annotationfile from 
                which an Gold Standard overlay will be generated
        :param bool headerline: Specify if the ``.csv``-file has a 
            header/comment line
        :param str outputDir: Directory where to put the plots
        :param list graph: Specify which graphs should be plotted
        """
        self.headerline = headerline
        self.graph = graph
        # i hope these default colors are visible for colorblinds
        self.colors = ['Darkred', 'ForestGreen', 'Navy']
        self.outputDir = outputDir
        self.annotationFile = annotationFile
        # multiplot feature disabled
        self.multiplot = False

    def plot(self, sourceFile, orientation):
        """
        Plot a given ``.csv`` Rawvalidation file.

        :param str sourceFile: Path to the to-be-plotted file
        :param str orientation: Identification which sensor to plot
        """
        # gather overlay data
        if self.annotationFile:
            overlay = self._extractOverlayData(self.annotationFile, orientation)
        else:
            overlay = False

        # build plot export location
        if self.outputDir:
            outputDir = self.outputDir
        else:
            outputDir = os.path.dirname(sourceFile) + '/'
        accelFile = outputDir + 'accel-' +\
            os.path.splitext(os.path.basename(sourceFile))[0] + '.svg'
        gyroFile = outputDir + 'gyro-' +\
            os.path.splitext(os.path.basename(sourceFile))[0] + '.svg'

        src = self._importFile(sourceFile)
        self._plotData('accel', src, sourceFile, accelFile, overlay)
        self._plotData('gyro', src, sourceFile, gyroFile, overlay)

    def _extractOverlayData(self, xmlFile, sensorOrientation):
        """
        Gather Validationdata from a xml file.

        The xml Annotationfile created by :class:`Sedater <sedater>'
        has usually a Validation section for the (foot) ``pattern``-type.
        These values are generated by the Validationtxtfiles and considered
        Gold Standard parameters.

        .. code-block:: none
            :linenos:

            [...]
            <Validation Type="PATTERN">
              <Sensor Orientation="right">
                [...]
                <Content>
                  <No1>
                    <Start>35</Start>
                    <End>154</End>
                  </No1>
              [...]

        The patterns (line 5-8) under of a certain Sensor are extracted 
        and returned.

        :param str xmlFile: Path to the file
        :param str sensorOrientation: Sensor which should be extracted
        :return: Properties (start and stop) of each Gold Parameter step
        :rtype: ``list(dict())``
        """
        tree = et.parse(xmlFile)

        goldStandardXML = tree.findall('.//Validation[@Type="PATTERN"]/'
            'Sensor[@Orientation="'+sensorOrientation+'"]/Content/')
        if goldStandardXML:
            exp = []
            for steps in goldStandardXML:
                title = steps.tag
                for step in steps:
                    if step.tag.lower() == 'start':
                        start = step.text
                    elif step.tag.lower() == 'end':
                        end = step.text
                properties = {'id': title, 'start': start, 'end': end}
                exp.append(properties)
        else:
            return False

        return exp

    def _plotData(self, identity, src, plotFile, outputFile, overlay):
        # determine the max y-values for best overlay placement
        maxima = []
        acceleration = plt.figure()

        if self.multiplot:
            plots = len(self.graph[0])
        else:
            # create only one plot
            ax = acceleration.add_subplot(111)
            plots = 1

        if identity == 'accel':
            source = self.graph[0]
        elif identity == 'gyro':
            source = self.graph[1]

        for i, accel in enumerate(source):
            j = i + 1 if self.multiplot else 1
            ax = acceleration.add_subplot(plots,1,j)
            ax.set_title('{} of {}'.format(identity, plotFile))
            ax.plot(
                  src['x']
                , src[accel]
                , color=self.colors[i]
                , label=accel)
            maxima.append(max(src[accel]))
        if overlay:
            # place overlay arrows at 1/3 of y-max
            yOverlay = 0.3 * max(maxima)
            legend = []
            for gs in overlay:
                ax.annotate(''
                        , xy=(gs['start'],yOverlay)
                        , xycoords='data'
                        , xytext=(gs['end'],yOverlay)
                        , textcoords='data'
                        , horizontalalignment='bottom'
                        , verticalalignment='center'
                        , arrowprops=dict(
                              arrowstyle="<|-|>"
                            , fc="white"
                            , ec="black"
                            , alpha=0.5
                            )
                        ).set_alpha(0.5)
                legend.append(gs['id']+": "+gs['start']+"-"+gs['end'])

            at = AnchoredText("Gold Standard:\n"+"\n".join(legend),
                    prop=dict(size=10), loc=4)
            at.patch.set_boxstyle("round")
            at.patch.set_alpha(0.5)
            ax.add_artist(at)

        ax.legend(
                  loc=1
                , fontsize=10
                , fancybox=True).get_frame().set_alpha(0.5)
        # plt.show()
        plt.savefig(outputFile, format='svg')

    def _importFile(self, sourceFile):
        header = 1 if self.headerline else 0

        data = np.genfromtxt(
                  sourceFile
                , delimiter=','
                , skip_header=header
                , names=[
                      'x'
                    , 'accelX'
                    , 'accelY'
                    , 'accelZ'
                    , 'gyroX'
                    , 'gyroY'
                    , 'gyroZ'
                    ]
                )
        return data
